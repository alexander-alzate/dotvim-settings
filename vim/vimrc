" # Extend From Defaults
source $VIMRUNTIME/defaults.vim

" # Plugin Manager Configuration
let VIM_PROJECTS_DIR = (
			\ strlen($XDG_PROJECTS_DIR)
			\ ? $XDG_PROJECTS_DIR
			\ : $HOME . '/Projects'
		\ ) . '/vim'

call plug#begin(VIM_PROJECTS_DIR)

" ## File type plugins
Plug '2072/vim-syntax-for-PHP', { 'for': 'php' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'alexander-alzate/vim-markdown', { 'for': 'markdown' }

" ## Misc plugins
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'alexander-alzate/nerdtree'
Plug 'alexander-alzate/vim-color-hour'
Plug 'alexander-alzate/vim-session'
Plug 'bronson/vim-trailing-whitespace'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'zirrostig/vim-schlepp'
Plug 'w0rp/ale'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

call plug#end()

" # UltiSnips
" ## Configuration
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" ### Set personal snippets directory
let g:UltiSnipsSnippetsDir        = $HOME . "/.vim/ultisnippets"
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "ultisnippets"]

" ### Tell :UltiSnipsEdit to split the window
let g:UltiSnipsEditSplit = "vertical"

" # Tagbar Options and Configuration
" ## Configuration
let g:tagbar_sort      = 0
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_foldlevel = 2

" ## Mappings
nnoremap <silent> <F9> :TagbarToggle<CR>

" # NERDTree
" ## Configuration
let NERDTreeBookmarksFile = $HOME."/.vim/NERDTreeBookmarks"
let NERDTreeChDirMode     = 2
let NERDTreeShowBookmarks = 1
let NERDTreeQuitOnOpen    = 1
let NERDTreeIgnore        = ['\.git$', 'node_modules', '\~$', '\.sourcemaps']
let NERDTreeShowHidden    = 1
let NERDTreeStatusline    = "%{fnamemodify(getcwd(), ':t')}"

" ## Closes NERDTree whether it is the left open window
autocmd BufEnter,BufWinEnter *
		\ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |
			\ q |
		\ endif

" ## Mappings
map <F12> :NERDTreeToggle<CR>

" # NERDCommenter
" ## Configuration
let NERDSpaceDelims       = 1
let NERDRemoveExtraSpaces = 1

" # Syntastic
" ## Configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

" # Vim Session
" ## Configuration
let g:session_persist_colors = 0
let g:session_autosave       = "yes"

" # Vim Schlepp
" ## Mappings
vmap <unique> <C-k> <Plug>SchleppUp
vmap <unique> <C-j> <Plug>SchleppDown
vmap <unique> <C-h> <Plug>SchleppLeft
vmap <unique> <C-l> <Plug>SchleppRight
vmap <unique> <C-d> <Plug>SchleppDup

" # Personal Configuration
" ## Options
set list listchars =tab:\¦›
set formatoptions  =torcj
set viminfo        ='10,<50,s10,h,n~/.vim/viminfo
set textwidth      =80

set hidden
set hlsearch

set number

set shiftwidth  =4
set softtabstop =4
set tabstop     =4
set noexpandtab

let mapleader    = ","
let &colorcolumn = "80,".join(range(110, 999), ",")
" ## Autocommands
autocmd ColorScheme * highlight ColorColumn ctermbg=235 guibg=#2c2d27

" ## Mappings
" ### Refresh without higlights
imap <silent> <C-L> <ESC>:nohlsearch<CR>a
nmap <silent> <C-L> :nohlsearch<CR>

" ### Open terminal emulator
map <silent> <Leader>t <ESC>:call system('gnome-terminal')<CR><ESC>

" ### Delete current line
imap <C-K> <ESC>ddi
nmap <C-K> dd

